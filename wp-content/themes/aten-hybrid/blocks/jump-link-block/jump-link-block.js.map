{"version":3,"file":"blocks/jump-link-block/jump-link-block.js","mappings":";AAAA;AACA;AACA;;AAEAA,MAAM,CAACC,QAAQ,CAAC,CAACC,KAAK,CAAC,UAAUC,CAAC,EAAE;EAClC;EACA,IAAIC,oBAAoB,GAAGC,kBAAkB,CAC3C,yBAAyB,EACzB,gBACF,CAAC;EACD;EACAF,CAAC,CAACC,oBAAoB,CAAC,CAACE,QAAQ,CAAC,6BAA6B,CAAC;;EAE/D;EACA,IAAIC,iBAAiB,GAAGF,kBAAkB,CAAC,yBAAyB,CAAC;EACrE;EACAF,CAAC,CAACI,iBAAiB,CAAC,CAACD,QAAQ,CAAC,iCAAiC,CAAC;;EAEhE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASD,kBAAkBA,CAACG,kBAAkB,EAAEC,cAAc,EAAE;IAC9D;IACA,IAAIC,cAAc,GAAG,EAAE;;IAEvB;IACAP,CAAC,CAAC,GAAG,GAAGK,kBAAkB,CAAC,CAACG,IAAI,CAAC,YAAY;MAC3C;MACA,IAAIC,aAAa,GAAG,IAAIC,MAAM,CAAC,CAAC;MAChC;MACAD,aAAa,CAACE,IAAI,GAAGX,CAAC,CAAC,IAAI,CAAC,CAACY,IAAI,CAAC,CAAC;MACnC;MACAH,aAAa,CAACI,EAAE,GAAGJ,aAAa,CAACE,IAAI,CAACG,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;MACxE;MACA,IAAIC,MAAM,GAAG,iBAAiB,GAAGP,aAAa,CAACI,EAAE,GAAG,QAAQ;MAC5D;MACAb,CAAC,CAACgB,MAAM,CAAC,CAACC,SAAS,CAAC,IAAI,CAAC;MACzB;MACAV,cAAc,CAACW,IAAI,CAACT,aAAa,CAAC;IACpC,CAAC,CAAC;IAEF,OAAOU,gBAAgB,CAACZ,cAAc,EAAED,cAAc,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASa,gBAAgBA,CAACC,KAAK,EAAEd,cAAc,EAAE;IAC/C;IACA,IAAIe,WAAW,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACV,EAAE,CAACY,aAAa,CAACD,CAAC,CAACX,EAAE,CAAC,CAAC;IAChE,IAAIa,YAAY,GAAG,EAAE;;IAErB;IACA,IAAIpB,cAAc,KAAKqB,SAAS,EAAE;MAChCD,YAAY,IACV,kDAAkD,GAClDpB,cAAc,GACd,SAAS;IACb;;IAEA;IACA,IAAIsB,QAAQ,GAAG,6BAA6B;IAC5C5B,CAAC,CAACqB,WAAW,CAAC,CAACb,IAAI,CAAC,YAAY;MAC9B;MACAoB,QAAQ,IACN,oDAAoD,GACpD5B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACa,EAAE,GACb,IAAI,GACJa,YAAY,GACZ1B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACW,IAAI,GACf,WAAW;IACf,CAAC,CAAC;IACFiB,QAAQ,IAAI,OAAO;IAEnB,OAAOA,QAAQ;EACjB;AACF,CAAC,CAAC,C","sources":["webpack://aten-hybrid/./blocks/jump-link-block/src/jump-link-block.js"],"sourcesContent":["/**\n * Custom JS for Jump Link functionality, utilized by both the All Services and Jump Link blocks\n */\n\njQuery(document).ready(function ($) {\n  // Creating jump link list for all services block, prefixing the list items with a downward arrow icon\n  var servicesJumpLinkList = createJumpLinkList(\n    'service-section-heading',\n    'arrow_downward'\n  );\n  // Placing the services jump link list into the wrapper div of the block template\n  $(servicesJumpLinkList).appendTo('.services-jump-link-wrapper');\n\n  // Creating jump link list for jump link block\n  var jumpLinkBlockList = createJumpLinkList('jump-link-section-title');\n  // Placing the jump link block list into the wrapper div of the block template\n  $(jumpLinkBlockList).appendTo('.jump-link-block-list-container');\n\n  /**\n   *\n   * @param {string} targetElementClass\n   * @param {string} prefixIconName (optional)\n   * @returns string\n   *\n   * createJumpLinkList takes a target element class, adds anchor links to each element based on its text value,\n   * and returns an HTML UL of alphabetically-sorted jump links for each element in the class.\n   *\n   * If prefixIconName is passed, the matching Material Icon will prefix each of the list items.\n   */\n  function createJumpLinkList(targetElementClass, prefixIconName) {\n    // Creating an empty array to hold objects of element information\n    var targetElements = [];\n\n    // Looping through all target elements\n    $('.' + targetElementClass).each(function () {\n      // Creating a new object\n      let targetElement = new Object();\n      // Getting the name of the object based on its text content\n      targetElement.name = $(this).text();\n      // Creating an id for the object based on a kebab-case title\n      targetElement.id = targetElement.name.replace(/\\s+/g, '-').toLowerCase();\n      // Creating an anchor element for each object, prefixed to avoid collisions and numeric title errors\n      let anchor = '<a id=\"jump-to-' + targetElement.id + '\"></a>';\n      // Inserting the anchor element at the start of each target element\n      $(anchor).prependTo(this);\n      // Adding the object to the array of element objects\n      targetElements.push(targetElement);\n    });\n\n    return generateListHTML(targetElements, prefixIconName);\n  }\n\n  /**\n   *\n   * @param {array} array\n   * @param {string} prefixIconName (optional)\n   * @returns string\n   *\n   * generateListHTML sorts an array alphabetically and creates an HTML UL element containing each\n   * element of the array as a list item linking to the element's jump link\n   *\n   * If prefixIconName is passed, the matching Material Icon will prefix each of the list items.\n   */\n  function generateListHTML(array, prefixIconName) {\n    // Sorting array by ID\n    var sortedArray = array.sort((a, b) => a.id.localeCompare(b.id));\n    var optionalIcon = '';\n\n    // Checkiing for optional icon parameter\n    if (prefixIconName !== undefined) {\n      optionalIcon +=\n        '<span class=\"jump-link-icon\" aria-hidden=\"true\">' +\n        prefixIconName +\n        '</span>';\n    }\n\n    // Creating HTML UL\n    var listHTML = '<ul class=\"jump-link-list\">';\n    $(sortedArray).each(function () {\n      // Adding each element as a LI inside the UL\n      listHTML +=\n        '<li class=\"jump-link-list-item\"><a href=\"#jump-to-' +\n        $(this)[0].id +\n        '\">' +\n        optionalIcon +\n        $(this)[0].name +\n        '</a></li>';\n    });\n    listHTML += '</ul>';\n\n    return listHTML;\n  }\n});\n"],"names":["jQuery","document","ready","$","servicesJumpLinkList","createJumpLinkList","appendTo","jumpLinkBlockList","targetElementClass","prefixIconName","targetElements","each","targetElement","Object","name","text","id","replace","toLowerCase","anchor","prependTo","push","generateListHTML","array","sortedArray","sort","a","b","localeCompare","optionalIcon","undefined","listHTML"],"sourceRoot":""}